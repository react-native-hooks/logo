%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.3 (Build 18D109) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 251 100
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 251 100
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: QQCBXH+AvenirNext-Regular
%!FontType1-1.0: QQCBXH+AvenirNext-Regular 1.0000.2.0000
/FontInfo 1 dict dup begin
/FSType 4 def
end readonly def
14 dict begin/FontName /QQCBXH+AvenirNext-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /R put
dup 34 /e put
dup 35 /a put
dup 36 /c put
dup 37 /t put
dup 38 /space put
dup 39 /N put
dup 40 /i put
dup 41 /v put
dup 42 /H put
dup 43 /o put
dup 44 /k put
dup 45 /s put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -394 1 index div -411 2 index div 1309 3 index div 1192 5 -1 roll div]cvx def
/sfnts [<





00>] def
/CharStrings 15 dict dup begin
/.notdef 0 def
/space 1 def
/H 2 def
/N 3 def
/R 4 def
/a 5 def
/c 6 def
/e 7 def
/i 8 def
/k 9 def
/o 10 def
/s 11 def
/t 12 def
/v 13 def
/u0459 14 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 4 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-394 -411 1309 1192}def
/UniqueID 4446589 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B1454491BCF48412CA40CE1C5F7851A403FDB5F7EBECD00BD5944231A14C7B4627AA16D58DBEF830582B676B074DF205D9B2C23B79CC9D9A491812D79CF25382FCA0B0A8AFEEC8AE634009FDAC99837217C038413BC219A8405ED5C08950E74EC5FEEF262B8DEA1B189B786946FA6150CC902F66872D583AE7D754D10A724F4B2571380B934B82DE17D87F5C4F441084BA45D29CEE9F720A73C4531248B2EB2560B565E81A4A9774BC004E0E0AA43BE5CF84DBB80FF21B0445A3044DA0E911CE6272BD81BEB46CE14E1330F3E3E8203893DA178C676463E87A9E35A52A6ED096244E9597393CAA89B8919F085922AA5BA0357D996F4274CB54600AE6DDF26B93F8F52DE3EF83AECE471FA1E9940090FCFF7F61E87A40F28842206087BFFCF19CED1032A4E006EE1F320C1D37F8A75304BDB3CAE9136F232CAF50E8A90DDFD69B788669014BCA9F003598FFB6175C8C4AEB127ADF138D99F9300E938FB34E1180E718ED8053E161C1EAD6FCE90D248CB474210A2E7FB97E004A5ADF11F58CC9EF857020507739442679A78EFD3F91B1155033BD76E2D9D2E55ED361C09BEEB6FB7811D652B24F6D803E4632F0CE7AD8928C509477A48217F6FAB5921B24388B77FB9577333998247C63558AD40B6472CE21F11E47875E2B4A07252BD42C3C6D7F7D10772E33657C345474D00E7FB368FAFE7137D0F6F20EACE9C715F4FD79C11BD91C0773C3C254F7FFB2A243A0634441AD43F203FE91E45FB03B8C26B70CF5FE
FAFF06FA51EF5D07B7450FC7F63BBFCFC3106527B834806CC5D1276EE1D062441CFC8FAEB4428CB7E914633295645245B732BB85419701248604A961C072F91C09BCEFFD467D42F12435445EEF454BD8FBBC8739D540C82BAAEE7D17FFC0E94F24968D3110F570A5BAA2CEB640A8640E7DD3BFC9C6FF313502F4DF31DEA83FF0E1231A47D64272AA31C4BFD76E5112A8FD051D39F306D7EF47E7E16AE98437D556FC80240BDD2D49E9710BB63CA7DCE3527058FC6229414780B416A9C07C7B50C8DEDA9EC93D39AC1D81CE16A3669DE31AC4B824EA5D6CCAC7B2F400BD3452FC13C401C18A5D282524CD72365E7070992B78F80D697DCDBE806E9F5F4E5ECAA295DD2CE79C21B34FE2C698E720AB6AE98CDB38A3CE0BC1C487EE9699DB7303483C7E11AB483F72F8B40DD55331B5D2058D1EAB180BD2AA08A203DCCBE57BF92CEE9C900E4C1A001EF27EEBD6278A2FB6FBD298C4EA312C7AEFBE26763D4610186AB7EDA1721D455DA42EEC0A95B4AC45997F22377297685EC3C79410AD28193372B7B8E0374BB117581D9B1ECC35A524922C76108BEEC050FF378A8605C3C6327AE4C08AA7F3F87666110DD5A530B8D1A3AD8D810D22BC8C56F212E617ACADD4E5BCDB89B1BFDCEBAB6D0426BC78172EA700BAFEB4E9064C8518FF65A52A31F71536ADABC2887B6D819859EFC97D77DAC840E4A382E5B6D35447DABECE24597C69F77C904C21AE5D755C1A8FBF9066AC077CC93543B6C5DE0038521116068FAB5784829359C1E005E1B1A3D9039292DB53987EAFC822189EBBF975717694B4C172F7BAAA53D9481DD1A7586E3AF2A06BE1A3FB9BE37A17C03D8457AD9199DA3168EC7C6786F218DD3A02211D75523B013A14BFCB984D7888F8CC4932FB22C1E5522C20FFCB7504633DA3477741DA1B244D2BEB4B451BD9A164EF714DDF710E92591968E8D0E5D6A59CA1B303F6552F0E01F56D90FC8FEFAAA3C825DFAF33421F576E0D82FB0177A9E7C42A141463C176D6AD3E0F7AA3BDF9E759E21B80E580954DEA8B8842FAFD030B3B5402CEA440AEB0296F48459AF696B9A6DC9C234671E8770649733C59DD05CDEA743F2C773B3C0A24C918E6FEFFD5BE74E7999D3A8AF3FB2CE4638977735479BE64E01DF3059F44C5EB85D2292BAE09AAF564175CCD74427087562B9178C16CB5657FC5890DFA4CCE35D0188B43D4D4B814AE81384170442F2CDB808B7BB44A174A3516B667EB54D10825C752086CA321FCA2C33C1EBA89EEAB32064FAD7EF8EFB6D8884BF2101EB24C4C95EF53E625FCAEA4407271E77824A4A073AEC8216DB01241F3251CCE890FC136A3E4CFD6346FED40907C1A058749FA1DA8E5AD21D06A0B6FF0BB3B98A574A345E1A4E6B51CC5E289A7E603A60E9CF0BF2E6600A6C6738352F0D3399B85036257A670BC1B3B5DC495580BB855
FB77671915E9C1DE108544627BD5F6CEF7391EE387D6291721753A359B95389C2464CF3423A14A99CB75ABBD63F6FA2653EF834BDC118ED363C1C24AE67C5BF2FD4162BB3320CACB1B07EC1330A5B65C07961959B9ACC1A8F03E216FC45DBA9389AF86B50E303707839926E9BE97FC928BF98528CE434AFDD64E34F1F889456F17F860D73F40DEF8C81AD2A0423A715C3BA1ECF94626857202FEDD11F012EDC6C5861E0B430D6725153A33BD5D6DA68A7EBE667D99F2E62F2F8FEC2815F5290407A652327D6CD6F59902CF1BC51A57FFD9883ED7C5CCD2FA5446F3648C3910AB4EC13C8577B47CFD798DF67D0BD179830F91F8842FE8CD40A0CB7C2346928AADEDEF432F3A701175A9CF9F789DFC6F29D6C6678394A896C3CBF58AFD6B34949BE4EA13168AD8BFC78AC989DBBAE2FE63C1D8ACEF475151295CD60B596D5F9D55AC00152841F58FCFA64F6D5B51513E2E12473C82BAA7C705906762CAFAE77763F9F0AD7E5F95FBAE9D7FB13A083E44FA624D56D68A20A9A46C5E8D047AA8EDE752C72153AC36E31E57F87B09B819935355A4D479514241EF64F94DF48680938A8D0EA7B3663DAD3B77347D665D425F356C9EDF2E7D02619C701E07E3F5BB1A2328FD3FCFC2742446057716CBBDD50166D113775DF6542A29AC342864869288B027440C8C5DAB17A2E9ECCD19350973C0E1E19335735CC25039241831CB2B1BA01711BCED64FADF4D79215DB7CDB1860829C194E7CB830A9352BA97B861FE00EB48E94F8F42089A3D4595784CF49C099E6368DA206DC945DDFFB8B986224FE89B458B208F5E7D97D4CA99AAE025EBD3A42A61948DFD6A021B0FB3380FF1A5710F36FE6D17B41E2FF34B85CCD7E98F0BF23DD4D5C574622B0F2AFB784FF03BB4FB799FA3FDE2F8FB61AC8BDEA00A6454AC5E0CAD2BCB3254D69362100EC50F09767396FB1DE6E32874F08A50A95C7BD5E22D74292503CFDAA2063692F0459C7FE109CFD0AAA9B9C62E53916C22FEF0A6C846B28296D5C241E38176E75C4C51EF58D58CE26848D74CC8BB678F38A2B7EF3B3D6424079F417CD4F6A61D0BD5AB5F4565FE677F44FE100B20B0E2946E3E10DA209F36F1BF22BB08F67D101EDC568B4B22AF7F9609B3BF66E3CA45ADD4D9823CDBD3EA37E873A8EE6750D29913219F102E9AD2C4F4E22E2E3F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/QQCBXH+AvenirNext-Regular cguidfix
/F1.1/QQCBXH+AvenirNext-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0.10196079 0.098039217 0.098039217 sc
0.60000002 i
q
0 0 251 100 rc
1 0 0 -1 94 61 cm
/F1.1[ 16 0 0 -16 0 0]sf
0.27200001 16 m
(!"#$%&'#%\(\)"&*++,-)[ 9.584000 9.152000 8.544000 8.000000 5.072000 4.000000 12.224000 8.544000 5.072000 4.000000 7.808000 9.152000 4.000000 11.488000 9.776000 9.776000 8.160000 0.000000 ] xS
Q
0.0039215689 0.0039215689 0.0039215689 sc
q
33.242928 19.452177 m
31.839788 20.015224 31.128052 20.497839 30.070612 21.644045 c
28.992838 22.810358 28.484453 23.795694 28.179422 25.364185 c
27.75238 27.475618 28.281099 30.954453 29.135185 31.839243 c
29.399546 32.100658 29.41988 31.959896 29.297869 30.733255 c
29.074179 28.460953 29.826588 25.907125 31.107716 24.539722 c
31.656771 23.956564 31.656771 23.594604 31.107716 23.594604 c
30.945032 23.594604 30.823021 23.534279 30.823021 23.453842 c
30.823021 23.232645 32.449848 21.784805 33.080246 21.463064 c
35.784851 20.095661 41.702442 22.488617 46.826954 27.033222 c
47.477684 27.616381 48.026741 28.159319 48.06741 28.219646 c
48.087746 28.300081 47.152317 29.466396 45.972866 30.833799 c
44.813751 32.181095 43.308933 33.990894 42.678539 34.855576 c
41.499088 36.424068 l
39.363873 36.665375 l
35.113781 37.127876 29.41988 38.394737 26.410246 39.540943 c
20.757015 41.7127 17.422014 44.226311 16.262899 47.222534 c
15.815521 48.388847 15.957869 50.480171 16.547594 51.807358 c
17.767715 54.542164 22.18049 57.578606 27.610033 59.408512 c
28.647137 59.77047 29.562227 60.112324 29.64357 60.172649 c
29.704576 60.232975 29.541893 61.238419 29.257198 62.404736 c
28.850491 64.09388 28.728477 65.240082 28.647137 68.135765 c
28.525124 72.077103 28.687807 73.685814 29.41988 75.57605 c
30.029942 77.184761 31.453417 78.672813 33.120918 79.41684 c
34.239361 79.919563 34.625732 79.979889 36.415245 80 c
38.326771 80 38.550461 79.959785 39.851921 79.316299 c
40.685673 78.914124 41.702442 78.190201 42.393845 77.5065 c
43.532623 76.380402 45.07811 73.826576 44.793415 73.545052 c
44.712074 73.464615 44.163021 73.866791 43.573296 74.449951 c
41.702442 76.299965 39.77058 77.285301 38.02174 77.285301 c
37.330338 77.285301 36.964302 77.566826 37.330338 77.788025 c
38.469116 78.471725 35.093449 78.4114 33.710644 77.707588 c
32.734547 77.224976 32.002472 76.098877 31.39241 74.208641 c
30.802685 72.398842 30.843355 66.989555 31.453417 63.550941 c
31.677107 62.203644 31.941465 61.017223 32.043144 60.936787 c
32.124485 60.85635 33.344604 60.997112 34.747746 61.278637 c
36.171223 61.580269 38.489452 61.962337 39.892593 62.143318 c
42.475185 62.50528 l
44.50872 65.119431 l
46.806618 68.055328 52.154819 73.464615 54.290031 75.033112 c
57.787716 77.566826 60.553326 78.692924 63.298599 78.713036 c
64.762741 78.733139 65.189789 78.652702 66.104881 78.190201 c
67.853722 77.345627 69.11451 75.636375 69.785583 73.203201 c
70.497314 70.649376 70.293961 65.079216 69.378876 61.660706 c
69.094177 60.615044 l
71.656433 59.77047 l
74.991432 58.684593 76.862289 57.840019 78.977165 56.4324 c
81.132713 55.024776 82.617195 53.53672 83.389938 52.028553 c
83.938995 50.982895 84 50.641041 84 49.012222 c
84 47.323078 83.938995 47.101879 83.247589 45.69426 c
81.864784 42.919235 79.892258 41.612156 76.394577 41.089325 c
74.991432 40.888237 73.05957 41.04911 73.039238 41.390961 c
73.018906 41.491505 73.588295 41.692593 74.300034 41.833355 c
76.71994 42.315968 78.570457 43.421955 79.566887 44.970341 c
80.075272 45.774693 l
80.441315 45.29208 l
80.827682 44.809467 l
81.559753 46.317635 l
82.434174 48.087215 82.434174 49.052441 81.580093 50.70137 c
80.380302 53.054108 75.784515 55.969894 70.598991 57.699257 c
69.480553 58.081326 68.56546 58.36285 68.54512 58.322632 c
68.524788 58.302525 68.301102 57.598713 68.036736 56.77425 c
67.792717 55.949783 66.999634 53.838352 66.287895 52.088882 c
65.576157 50.319302 64.986435 48.750809 64.986435 48.589935 c
64.986435 48.408958 65.576157 46.820354 66.287895 45.030666 c
68.890823 38.595825 69.663567 35.237644 69.805916 30.009336 c
69.88726 26.671263 69.86692 25.887016 69.56189 24.881573 c
68.870491 22.548943 67.752045 20.980452 66.104881 20.11577 c
65.413475 19.733702 64.966095 19.673374 63.054573 19.673374 c
60.980366 19.673374 60.695671 19.733702 59.190853 20.336967 c
56.567593 21.422846 54.229027 22.931011 51.341404 25.444622 c
50.588997 26.088106 49.938263 26.610937 49.856922 26.610937 c
49.795918 26.610937 49.226524 26.128323 48.59613 25.545166 c
46.277897 23.413626 43.735977 21.804914 40.502655 20.397293 c
37.025307 18.889128 35.195126 18.647821 33.242928 19.452177 c
h
65.535492 21.261976 m
67.365669 22.106548 68.443443 24.097326 68.870491 27.375074 c
69.317863 30.833799 68.382439 36.54472 66.430244 42.134987 c
65.250793 45.533386 64.518723 47.323078 64.356041 47.323078 c
64.274696 47.323078 63.705307 46.317635 63.054573 45.090992 c
61.976799 42.999668 59.841587 39.339855 58.906158 37.97245 c
58.519787 37.429512 58.519787 37.349075 58.784149 37.147987 c
59.048508 36.946899 59.028172 36.88657 58.601128 36.786026 c
58.255428 36.705593 57.442013 35.780582 56.038872 33.930569 c
54.920429 32.442509 53.313934 30.451731 52.480183 29.546831 c
50.995701 27.877796 l
52.032806 26.872351 l
53.374939 25.585384 55.123783 24.19787 56.547256 23.292973 c
60.370304 20.879908 63.278263 20.236423 65.535492 21.261976 c
h
51.219391 31.437067 m
53.151253 33.608826 55.022106 35.901237 55.022106 36.102325 c
55.022106 36.182762 52.561527 36.222977 49.531555 36.202869 c
46.521923 36.202869 44.041008 36.122433 44.041008 36.042 c
44.041008 35.579494 49.02317 29.627268 49.409546 29.627268 c
49.531555 29.627268 50.344971 30.451731 51.219391 31.437067 c
h
56.811619 38.575718 m
59.556892 42.657818 63.15625 49.012222 63.15625 49.836689 c
63.15625 50.359516 61.326069 53.858463 59.251862 57.297081 c
57.503021 60.192757 57.360672 60.35363 56.66927 60.474281 c
55.306801 60.69548 47.213326 60.85635 44.65107 60.715588 c
42.10915 60.554718 l
40.746677 58.52372 l
39.180855 56.130764 37.310001 52.953564 36.496586 51.264416 c
36.089882 50.399734 35.988205 49.977448 36.110214 49.635597 c
36.557594 48.449173 39.282532 43.321411 40.583996 41.189869 c
42.800552 37.570274 43.146252 37.107769 43.796982 37.007225 c
44.102013 36.967007 46.908295 36.926788 50.019604 36.946899 c
55.713509 36.967007 l
56.811619 38.575718 l
h
40.421314 37.912125 m
40.21796 38.274082 39.506222 39.380074 38.875824 40.385517 c
38.225094 41.37085 37.065979 43.341522 36.2729 44.749142 c
35.500156 46.176872 34.788418 47.28286 34.686741 47.222534 c
34.6054 47.182316 34.422379 46.860573 34.280033 46.518723 c
34.015675 45.915455 33.669971 45.69426 33.669971 46.156761 c
33.669971 46.297523 33.812321 46.840466 34.015675 47.363297 c
34.341038 48.288303 l
33.222595 50.882347 l
32.592197 52.28997 31.697441 54.542164 31.209393 55.86935 c
30.741678 57.196537 30.273966 58.342743 30.212959 58.443287 c
29.989271 58.7047 26.369576 57.437843 23.80732 56.170982 c
18.398113 53.53672 16.384911 50.741585 17.523691 47.443729 c
17.930399 46.297523 19.638571 44.38718 21.245064 43.301304 c
23.80732 41.592049 27.772717 39.943119 31.839788 38.917568 c
33.93433 38.394737 35.113781 38.153431 39.160519 37.489838 c
40.929695 37.208313 40.86869 37.188206 40.421314 37.912125 c
h
64.844086 53.154652 m
66.043869 55.990002 66.897957 58.584049 66.694603 58.785137 c
66.287895 59.147095 58.601128 60.393848 58.357105 60.132431 c
58.275764 60.072105 58.763813 59.167206 59.434879 58.141651 c
61.021038 55.748695 63.562958 51.284527 63.562958 50.922565 c
63.562958 50.399734 63.949329 51.063328 64.844086 53.154652 c
h
35.90686 51.385071 m
35.90686 51.686703 38.367439 56.050331 39.831589 58.342743 c
40.482319 59.388401 40.970367 60.273193 40.909363 60.333519 c
40.685673 60.554718 32.836224 59.428619 32.551525 59.147095 c
32.388844 58.986225 34.930763 51.887791 35.418812 51.103546 c
35.561161 50.882347 35.90686 51.103546 35.90686 51.385071 c
h
67.813049 62.042774 m
68.606133 66.02433 68.687469 66.768356 68.606133 69.744476 c
68.524788 72.278191 68.443443 72.941788 68.057076 73.947227 c
66.308235 78.371178 62.098812 78.652702 56.038872 74.77169 c
53.191921 72.961891 49.307869 69.442841 46.39991 66.02433 c
44.996769 64.375404 43.837654 62.907455 43.837654 62.766693 c
43.837654 62.726475 46.440582 62.706367 49.633232 62.706367 c
52.825886 62.706367 55.428814 62.746586 55.428814 62.806911 c
55.428814 62.867237 55.245792 63.168873 55.022106 63.510723 c
54.432381 64.395515 54.493385 64.797691 55.144115 64.194427 c
55.428814 63.93301 55.815186 63.470505 55.977867 63.18898 c
56.262562 62.706367 56.465916 62.625931 57.848721 62.50528 c
59.902592 62.324299 64.396706 61.640598 65.79985 61.298744 c
67.569023 60.876461 67.569023 60.876461 67.813049 62.042774 c
h
W
0 0 251 100 rc
11 85 m
89 85 l
89 14 l
11 14 l
h
f
Q
q
48.129139 43.323338 m
47.635452 43.517109 46.819798 44.012306 46.304649 44.485973 c
42.119061 48.16766 43.922081 54.777462 49.395546 55.897041 c
50.96246 56.219994 52.851341 55.767857 54.246536 54.755932 c
59.398033 51.052719 56.84375 42.935791 50.533169 43.000381 c
49.717514 43.000381 48.622822 43.151096 48.129139 43.323338 c
h
W
0 0 251 100 rc
39 61 m
62 61 l
62 38 l
39 38 l
h
f
ep
end
